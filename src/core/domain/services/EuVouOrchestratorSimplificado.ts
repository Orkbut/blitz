/**
 * üé≠ EU VOU ORCHESTRATOR SIMPLIFICADO
 * 
 * NOVA VERS√ÉO QUE:
 * - USA ValidadorUnico (remove l√≥gica duplicada)
 * - Age apenas como COORDENADOR
 * - Delega valida√ß√µes para ValidadorUnico
 * - Executa apenas a persist√™ncia final
 * 
 * SUBSTITUI:
 * - EuVouOrchestrator.ts (vers√£o complexa com l√≥gica duplicada)
 * 
 * RESPONSABILIDADES REDUZIDAS:
 * - Coordenar o fluxo (ValidadorUnico ‚Üí Persist√™ncia ‚Üí Resposta)
 * - Executar a√ß√µes de persist√™ncia
 * - Disparar eventos/notifica√ß√µes
 * - Retornar resultado formatado
 */

import { supabase } from '@/lib/supabase';
import { ValidadorUnico } from './ValidadorUnico';

// üìã TIPOS E INTERFACES
interface ResultadoExecucao {
  sucesso: boolean;
  mensagem: string;
  tipoAcao: 'CONFIRMACAO' | 'SOLICITACAO';
  codigoErro?: string;
  detalhes?: any;
  dadosParticipacao?: {
    id: number;
    estado_visual: string;
    posicao_fila?: number;
    data_participacao: string;
  };
}

export class EuVouOrchestratorSimplificado {
  
  private validadorUnico: ValidadorUnico;

  constructor() {
    console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] üö® ======= ORCHESTRATOR SIMPLIFICADO INICIALIZADO =======`);
    console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] ‚è∞ Timestamp: ${new Date().toISOString()}`);
    console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] üîÑ Usa ValidadorUnico (remove l√≥gica duplicada)`);
    
    this.validadorUnico = new ValidadorUnico();
  }

  /**
   * üéØ M√âTODO PRINCIPAL SIMPLIFICADO
   * 
   * ANTES: 200+ linhas com valida√ß√µes duplicadas
   * AGORA: ~50 linhas focadas em coordena√ß√£o
   */
  async executar(operacaoId: number, membroId: number): Promise<ResultadoExecucao> {
    
    console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] üö® ======= EXECU√á√ÉO INICIADA =======`);
    console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] üéØ Opera√ß√£o: ${operacaoId}, Membro: ${membroId}`);
    console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] ‚è∞ Timestamp: ${new Date().toISOString()}`);

    try {
      // 1Ô∏è‚É£ DELEGA√á√ÉO PARA VALIDADOR √öNICO
      console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] üì° Delegando valida√ß√£o para ValidadorUnico...`);
      
      const resultadoValidacao = await this.validadorUnico.validarParticipacao(
        operacaoId, 
        membroId, 
        'SOLICITACAO'
      );

      console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] üìä Resultado valida√ß√£o:`, {
        valido: resultadoValidacao.valido,
        estrategia: resultadoValidacao.estrategia,
        mensagem: resultadoValidacao.mensagem
      });

      // 2Ô∏è‚É£ VERIFICA√á√ÉO DE RESULTADO
      if (!resultadoValidacao.valido) {
        console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] ‚ùå Valida√ß√£o rejeitada: ${resultadoValidacao.mensagem}`);
        
        return {
          sucesso: false,
          mensagem: resultadoValidacao.mensagem,
          tipoAcao: 'SOLICITACAO',
          codigoErro: resultadoValidacao.codigoErro,
          detalhes: resultadoValidacao.detalhes
        };
      }

      // 3Ô∏è‚É£ EXECU√á√ÉO DA ESTRAT√âGIA DETERMINADA
      console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] ‚ö° Executando estrat√©gia: ${resultadoValidacao.estrategia}`);
      
      let resultadoExecucao: ResultadoExecucao;

      switch (resultadoValidacao.estrategia) {
        case 'CONFIRMACAO_DIRETA':
          resultadoExecucao = await this.executarConfirmacaoDireta(operacaoId, membroId, resultadoValidacao);
          break;
        
        case 'ADICIONAR_FILA':
          resultadoExecucao = await this.executarAdicaoFila(operacaoId, membroId, resultadoValidacao);
          break;
        
        default:
          throw new Error(`Estrat√©gia desconhecida: ${resultadoValidacao.estrategia}`);
      }

      // 4Ô∏è‚É£ EVENTOS E NOTIFICA√á√ïES
      console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] üì¢ Disparando eventos...`);
      
      await this.dispararEventos(operacaoId, membroId, resultadoExecucao);

      console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] ‚úÖ Execu√ß√£o conclu√≠da com sucesso!`);
      console.log(`üé≠ [ORCHESTRATOR-SIMPLIFICADO] üèÅ Resultado:`, resultadoExecucao);

      return resultadoExecucao;

    } catch (error) {
      console.error('üö® [ORCHESTRATOR-SIMPLIFICADO] Erro interno:', error);
      
      return {
        sucesso: false,
        mensagem: 'Erro interno no processamento',
        tipoAcao: 'SOLICITACAO',
        codigoErro: 'ERRO_ORCHESTRATOR_INTERNO',
        detalhes: { error: error.message }
      };
    }
  }

  /**
   * ‚úÖ EXECU√á√ÉO DE CONFIRMA√á√ÉO DIRETA
   * 
   * Apenas persiste - valida√ß√£o j√° foi feita pelo ValidadorUnico
   */
  private async executarConfirmacaoDireta(
    operacaoId: number, 
    membroId: number, 
    resultadoValidacao: any
  ): Promise<ResultadoExecucao> {
    
    console.log(`‚úÖ [CONFIRMACAO-DIRETA] Criando participa√ß√£o confirmada...`);

    const { data: participacao, error } = await supabase
      .from('participacao')
      .insert({
        operacao_id: operacaoId,
        membro_id: membroId,
        estado_visual: 'CONFIRMADO',
        status_interno: 'CONFIRMADO',
        data_participacao: new Date().toISOString(),
        ativa: true,
        confirmado_automaticamente: true
      })
      .select()
      .single();

    if (error) {
      console.error('üö® [CONFIRMACAO-DIRETA] Erro database:', error);
      throw new Error('Erro ao confirmar participa√ß√£o');
    }

    console.log(`‚úÖ [CONFIRMACAO-DIRETA] Participa√ß√£o criada:`, participacao);

    return {
      sucesso: true,
      mensagem: resultadoValidacao.mensagem || 'Participa√ß√£o confirmada automaticamente!',
      tipoAcao: 'CONFIRMACAO',
      dadosParticipacao: {
        id: participacao.id,
        estado_visual: participacao.estado_visual,
        data_participacao: participacao.data_participacao
      }
    };
  }

  /**
   * üìã EXECU√á√ÉO DE ADI√á√ÉO √Ä FILA
   * 
   * Apenas persiste - valida√ß√£o j√° foi feita pelo ValidadorUnico
   */
  private async executarAdicaoFila(
    operacaoId: number, 
    membroId: number, 
    resultadoValidacao: any
  ): Promise<ResultadoExecucao> {
    
    console.log(`üìã [ADICAO-FILA] Criando participa√ß√£o pendente...`);

    const { data: participacao, error } = await supabase
      .from('participacao')
      .insert({
        operacao_id: operacaoId,
        membro_id: membroId,
        estado_visual: 'PENDENTE',
        status_interno: 'AGUARDANDO_SUPERVISOR',
        data_participacao: new Date().toISOString(),
        ativa: true
      })
      .select()
      .single();

    if (error) {
      console.error('üö® [ADICAO-FILA] Erro database:', error);
      throw new Error('Erro ao adicionar √† fila');
    }

    console.log(`üìã [ADICAO-FILA] Participa√ß√£o criada:`, participacao);

    return {
      sucesso: true,
      mensagem: resultadoValidacao.mensagem || 'Adicionado √† fila de espera!',
      tipoAcao: 'SOLICITACAO',
      dadosParticipacao: {
        id: participacao.id,
        estado_visual: participacao.estado_visual,
        posicao_fila: resultadoValidacao.dadosCalculados?.posicao_fila_estimada,
        data_participacao: participacao.data_participacao
      }
    };
  }

  /**
   * üì¢ DISPARO DE EVENTOS E NOTIFICA√á√ïES
   * 
   * Respons√°vel por notificar outros componentes sobre a mudan√ßa
   */
  private async dispararEventos(
    operacaoId: number, 
    membroId: number, 
    resultado: ResultadoExecucao
  ): Promise<void> {
    
    console.log(`üì¢ [DISPARAR-EVENTOS] Tipo: ${resultado.tipoAcao}`);

    try {
      // Registrar evento no hist√≥rico
      await supabase
        .from('evento_operacao')
        .insert({
          operacao_id: operacaoId,
          membro_id: membroId,
          tipo_evento: resultado.tipoAcao === 'CONFIRMACAO' ? 'PARTICIPACAO_CONFIRMADA' : 'PARTICIPACAO_CRIADA',
          data_evento: new Date().toISOString(),
          detalhes: {
            orchestrator: 'simplificado',
            resultado: resultado.tipoAcao,
            participacao_id: resultado.dadosParticipacao?.id
          }
        });

      // Em um sistema real, aqui seria disparado:
      // - Notifica√ß√£o real-time via Supabase
      // - Email/SMS se configurado
      // - Webhook para integra√ß√µes
      
      console.log(`üì¢ [DISPARAR-EVENTOS] ‚úÖ Eventos disparados com sucesso`);

    } catch (error) {
      console.error('üö® [DISPARAR-EVENTOS] Erro ao disparar eventos:', error);
      // N√£o propaga o erro pois a opera√ß√£o principal j√° foi realizada
    }
  }

  /**
   * üìä M√âTODO UTILIT√ÅRIO - STATUS DA EXECU√á√ÉO
   * 
   * √ötil para debugging e monitoramento
   */
  async obterStatusExecucao(operacaoId: number): Promise<any> {
    console.log(`üìä [STATUS-EXECUCAO] Opera√ß√£o: ${operacaoId}`);

    const estatisticas = await this.validadorUnico.obterEstatisticasOperacao(operacaoId);

    return {
      operacao_id: operacaoId,
      timestamp: new Date().toISOString(),
      orchestrator: 'simplificado',
      validador: 'unico',
      estatisticas,
      estrategias_dispon√≠veis: ['CONFIRMACAO_DIRETA', 'ADICIONAR_FILA', 'REJEITADO']
    };
  }

  /**
   * üîÑ M√âTODO DE MIGRA√á√ÉO
   * 
   * Para facilitar a transi√ß√£o do EuVouOrchestrator original
   */
  static async migrarDo_EuVouOrchestrator_Original(): Promise<void> {
    console.log(`üîÑ [MIGRACAO] Iniciando migra√ß√£o para orchestrator simplificado...`);
    
    // Em um sistema real, este m√©todo:
    // 1. Verificaria dados inconsistentes
    // 2. Reprocessaria participa√ß√µes pendentes
    // 3. Validaria integridade dos dados
    // 4. Geraria relat√≥rio de migra√ß√£o
    
    console.log(`üîÑ [MIGRACAO] ‚úÖ Migra√ß√£o simulada conclu√≠da`);
  }
} 