/**
 * VALIDADOR DE PARTICIPA√á√ÉO
 * 
 * üîë REGRAS FUNDAMENTAIS:
 * - O banco de dados √© a fonte absoluta da verdade
 * - Todas as valida√ß√µes devem consultar dados frescos do banco
 * - N√£o pode haver inconsist√™ncias entre valida√ß√£o e dados reais
 * 
 * üìã REGRAS DE NEG√ìCIO:
 * - O supervisor pode exceder o limite de participantes que ele mesmo definiu
 * - Existe exce√ß√£o no banco de dados que permite ao supervisor adicionar mais participantes
 * - Esta exce√ß√£o √© uma regra de neg√≥cio v√°lida e intencional
 * - As valida√ß√µes aqui se aplicam principalmente a participa√ß√µes normais dos membros
 */

import { ParametrizacaoService } from '../../infrastructure/services/ParametrizacaoService';
import { SupabaseOperacaoRepository } from '../../infrastructure/repositories/SupabaseOperacaoRepository';
import { SupabaseServidorRepository } from '../../infrastructure/repositories/SupabaseServidorRepository';
import { supabase } from '@/lib/supabase';

// üéØ ENUM: Contexto de valida√ß√£o
export enum ContextoValidacao {
  SOLICITACAO = 'SOLICITACAO',
  CONFIRMACAO = 'CONFIRMACAO'
}

export interface ResultadoValidacao {
  podeParticipar: boolean;
  motivos: string[];
}

export class ValidadorParticipacao {
  private parametrizacaoService: ParametrizacaoService;
  private operacaoRepository: SupabaseOperacaoRepository;
  private servidorRepository: SupabaseServidorRepository;

  constructor() {
    this.parametrizacaoService = ParametrizacaoService.getInstance();
    this.operacaoRepository = new SupabaseOperacaoRepository();
    this.servidorRepository = new SupabaseServidorRepository();
  }

  // üéØ M√âTODO PRINCIPAL: Rotear valida√ß√£o baseada no contexto
  async validar(
    servidorId: number, 
    operacaoId: number,
    contexto: ContextoValidacao = ContextoValidacao.SOLICITACAO
  ): Promise<ResultadoValidacao> {
    console.log(`[TEMP-LOG-VALIDADOR] üö® IN√çCIO VALIDA√á√ÉO - Servidor ${servidorId} ‚Üí Op ${operacaoId}`);
    console.log(`[TEMP-LOG-VALIDADOR] üìã CONTEXTO: ${contexto}`);
    
    if (contexto === ContextoValidacao.SOLICITACAO) {
      return this.validarParaSolicitacao(servidorId, operacaoId);
    } else {
      return this.validarParaConfirmacao(servidorId, operacaoId);
    }
  }

  // üéØ VALIDA√á√ÉO PARA SOLICITA√á√ÉO: Apenas verifica√ß√µes b√°sicas
  async validarParaSolicitacao(servidorId: number, operacaoId: number): Promise<ResultadoValidacao> {
    console.log(`[TEMP-LOG-VALIDADOR] ‚úÖ SOLICITA√á√ÉO - Valida√ß√µes b√°sicas apenas`);
    
    const motivos: string[] = [];

    try {
      // 1. ‚úÖ CARREGAR DADOS B√ÅSICOS
      const [operacao, servidor] = await Promise.all([
        this.carregarOperacao(operacaoId),
        this.carregarServidor(servidorId)
      ]);

      if (!operacao || !servidor) {
        motivos.push('Opera√ß√£o ou servidor n√£o encontrado');
        return { podeParticipar: false, motivos };
      }

      console.log(`[TEMP-LOG-VALIDADOR] üìã Dados carregados - Op: ${operacao.tipo} | Servidor: ${servidor.nome} (${servidor.perfil})`);

      // 2. ‚úÖ VALIDAR APENAS: Estado da opera√ß√£o (aceitar AGUARDANDO_SOLICITACOES para solicita√ß√£o)
      const statusValidos = ['ATIVA', 'AGUARDANDO_SOLICITACOES'];
      if (!statusValidos.includes(operacao.status)) {
        motivos.push(`Opera√ß√£o n√£o est√° dispon√≠vel para solicita√ß√µes (status: ${operacao.status})`);
      }

      // 3. ‚úÖ VALIDAR APENAS: Limite b√°sico de participantes na opera√ß√£o
      const participacoesAtivas = await this.contarParticipacoes(operacaoId);
      console.log(`[TEMP-LOG-VALIDADOR] üìä Limite participantes: ${participacoesAtivas}/${operacao.limite_participantes || 0}`);

      // ‚úÖ PARA SOLICITA√á√ÉO: Aceitar mesmo se estiver no limite (fila de espera)
      // S√≥ bloquear se estiver muito acima do limite (seguran√ßa)
      const limiteSeguranca = (operacao.limite_participantes || 0) * 3; // 3x mais que o limite
      if (participacoesAtivas >= limiteSeguranca) {
        motivos.push(`Opera√ß√£o com muitas solicita√ß√µes (${participacoesAtivas})`);
      }

      // 4. ‚ùå N√ÉO VALIDAR: Limites de ciclo funcional
      console.log(`[TEMP-LOG-VALIDADOR] ‚ö†Ô∏è SOLICITA√á√ÉO: N√ÉO validando limite de ciclo funcional`);
      
      // 5. ‚ùå N√ÉO VALIDAR: Limites de di√°rias mensais  
      console.log(`[TEMP-LOG-VALIDADOR] ‚ö†Ô∏è SOLICITA√á√ÉO: N√ÉO validando limite mensal de di√°rias`);

      // 6. ‚úÖ VALIDAR APENAS: Conflito de data (mesmo servidor, mesma data)
      if (await this.temConflitoPorData(servidorId, operacao.data_operacao)) {
        motivos.push('Servidor j√° possui participa√ß√£o ativa na mesma data');
      }

      const podeParticipar = motivos.length === 0;
      console.log(`[TEMP-LOG-VALIDADOR] üéØ RESULTADO SOLICITA√á√ÉO - Pode participar: ${podeParticipar} | Motivos: ${motivos.join(', ') || 'Nenhum'}`);

      return { podeParticipar, motivos };

    } catch (error) {
      console.error(`[TEMP-LOG-VALIDADOR] ‚ùå Erro na valida√ß√£o de solicita√ß√£o:`, error);
      return { 
        podeParticipar: false, 
        motivos: ['Erro interno na valida√ß√£o'] 
      };
    }
  }

  // üéØ VALIDA√á√ÉO PARA CONFIRMA√á√ÉO: Todas as regras de neg√≥cio
  async validarParaConfirmacao(servidorId: number, operacaoId: number): Promise<ResultadoValidacao> {
    console.log(`[TEMP-LOG-VALIDADOR] ‚úÖ CONFIRMA√á√ÉO - Validando TODAS as regras`);
    
    const motivos: string[] = [];

    try {
      // 1. ‚úÖ CARREGAR DADOS COMPLETOS
      const [operacao, servidor] = await Promise.all([
        this.carregarOperacao(operacaoId),
        this.carregarServidor(servidorId)
      ]);

      if (!operacao || !servidor) {
        motivos.push('Opera√ß√£o ou servidor n√£o encontrado');
        return { podeParticipar: false, motivos };
      }

      console.log(`[TEMP-LOG-VALIDADOR] üìã Dados carregados - Op: ${operacao.tipo} | Servidor: ${servidor.nome} (${servidor.perfil})`);

      // 2. ‚úÖ VALIDAR: Estado da opera√ß√£o (confirma√ß√£o aceita apenas ATIVA)
      if (operacao.status !== 'ATIVA') {
        motivos.push(`Opera√ß√£o n√£o est√° ativa para confirma√ß√£o (status: ${operacao.status})`);
      }

      // 3. ‚úÖ VALIDAR: Limite de participantes na opera√ß√£o
      const participacoesAtivas = await this.contarParticipacoes(operacaoId);
      console.log(`[TEMP-LOG-VALIDADOR] üìä Limite participantes: ${participacoesAtivas}/${operacao.limite_participantes || 0}`);

      if (participacoesAtivas >= (operacao.limite_participantes || 0)) {
        motivos.push('Opera√ß√£o j√° atingiu o limite de participantes');
      }

      // 4. ‚úÖ VALIDAR: Limites de ciclo funcional
      console.log(`[TEMP-LOG-VALIDADOR] ‚úÖ CONFIRMA√á√ÉO: Validando limite de ciclo funcional`);
      const limiteCicloResult = await this.validarLimiteCicloFuncional(servidorId, operacao.data_operacao);
      if (!limiteCicloResult.podeParticipar) {
        motivos.push(...limiteCicloResult.motivos);
      }

      // 5. ‚úÖ VALIDAR: Limites de di√°rias mensais (apenas para PLANEJADA)
      if (operacao.tipo === 'PLANEJADA') {
        console.log(`[TEMP-LOG-VALIDADOR] ‚úÖ CONFIRMA√á√ÉO: Validando limite mensal de di√°rias`);
        const limiteDiariasResult = await this.validarLimiteMensalDiarias(servidorId, operacao.data_operacao);
        if (!limiteDiariasResult.podeParticipar) {
          motivos.push(...limiteDiariasResult.motivos);
        }
      }

      // 6. ‚úÖ VALIDAR: Conflito de data
      if (await this.temConflitoPorData(servidorId, operacao.data_operacao)) {
        motivos.push('Servidor j√° possui participa√ß√£o ativa na mesma data');
      }

      const podeParticipar = motivos.length === 0;
      console.log(`[TEMP-LOG-VALIDADOR] üéØ RESULTADO CONFIRMA√á√ÉO - Pode participar: ${podeParticipar} | Motivos: ${motivos.join(', ') || 'Nenhum'}`);

      return { podeParticipar, motivos };

    } catch (error) {
      console.error(`[TEMP-LOG-VALIDADOR] ‚ùå Erro na valida√ß√£o de confirma√ß√£o:`, error);
      return { 
        podeParticipar: false, 
        motivos: ['Erro interno na valida√ß√£o'] 
      };
    }
  }

  // M√©todo espec√≠fico para valida√ß√£o r√°pida (sem todas as verifica√ß√µes)
  async validacaoRapida(membroId: number, operacaoId: number): Promise<boolean> {
    try {
      console.log(`%c[TEMP-LOG-VALIDADOR] ‚ö° VALIDA√á√ÉO R√ÅPIDA - Membro ${membroId} ‚Üí Op ${operacaoId}`, 'background: #f3f4f6; color: #374151;');
      
      const operacao = await this.operacaoRepository.buscarPorId(operacaoId);
      if (!operacao || !operacao.ativa) {
        console.log(`%c[TEMP-LOG-VALIDADOR] ‚ùå Valida√ß√£o r√°pida falhou - Opera√ß√£o inv√°lida`, 'background: #fecaca; color: #991b1b;');
        return false;
      }

      const jaParticipa = await this.operacaoRepository.verificarParticipacaoExistente(membroId, operacaoId);
      if (jaParticipa) {
        console.log(`%c[TEMP-LOG-VALIDADOR] ‚ùå Valida√ß√£o r√°pida falhou - J√° participa`, 'background: #fecaca; color: #991b1b;');
        return false;
      }

      const participantesConfirmados = await this.operacaoRepository.contarParticipantesConfirmados(operacaoId);
      const podeParticipar = participantesConfirmados < operacao.limite_participantes;
      
      console.log(`%c[TEMP-LOG-VALIDADOR] ‚ö° Valida√ß√£o r√°pida resultado: ${podeParticipar} (${participantesConfirmados}/${operacao.limite_participantes})`, 'background: #f3f4f6; color: #374151;');
      
      return podeParticipar;
    } catch (error) {
      console.error('%c[TEMP-LOG-VALIDADOR] üí• ERRO na valida√ß√£o r√°pida:', 'background: #fecaca; color: #991b1b;', error);
      return false;
    }
  }

  // Helper para carregar opera√ß√£o
  private async carregarOperacao(operacaoId: number) {
    console.log(`[TEMP-LOG-VALIDADOR] üîç Carregando opera√ß√£o ${operacaoId} do banco...`);
    const operacao = await this.operacaoRepository.buscarPorId(operacaoId);
    console.log(`[TEMP-LOG-VALIDADOR] üìã Opera√ß√£o carregada: ${operacao?.tipo || 'N/A'} | Status: ${operacao?.status || 'N/A'} | Limite: ${operacao?.limite_participantes || 'N/A'}`);
    return operacao;
  }

  // Helper para carregar servidor
  private async carregarServidor(servidorId: number) {
    console.log(`[TEMP-LOG-VALIDADOR] üîç Carregando servidor ${servidorId} do banco...`);
    const servidor = await this.servidorRepository.buscarPorId(servidorId);
    console.log(`[TEMP-LOG-VALIDADOR] üë§ Servidor carregado: ${servidor?.nome || 'N/A'} | Perfil: ${servidor?.perfil || 'N/A'} | Regional: ${servidor?.regional_id || 'N/A'}`);
    return servidor;
  }

  // Helper para contar participantes ativos
  private async contarParticipacoes(operacaoId: number) {
    console.log(`[TEMP-LOG-VALIDADOR] üî¢ Contando participa√ß√µes ativas para opera√ß√£o ${operacaoId}...`);
    const count = await this.operacaoRepository.contarParticipantesConfirmados(operacaoId);
    console.log(`[TEMP-LOG-VALIDADOR] üìä Total de participa√ß√µes ativas encontradas: ${count}`);
    return count;
  }

  // Helper para verificar conflito por data
  private async temConflitoPorData(servidorId: number, dataOperacao: string) {
    return this.servidorRepository.verificarRestricaoTemporal(servidorId, dataOperacao);
  }

  // Helper para validar limite de ciclo funcional
  private async validarLimiteCicloFuncional(servidorId: number, dataOperacao: string) {
    const hoje = new Date();
    const dataOperacaoDate = new Date(dataOperacao);
    const diasDiferenca = Math.ceil((dataOperacaoDate.getTime() - hoje.getTime()) / (1000 * 60 * 60 * 24));
    
    const prazoMinimo = 1; // Valor fixo: m√≠nimo 1 dia de anteced√™ncia
    if (diasDiferenca < prazoMinimo) {
      return { podeParticipar: false, motivos: [`Opera√ß√£o deve ser agendada com pelo menos ${prazoMinimo} dia(s) de anteced√™ncia`] };
    }
    return { podeParticipar: true, motivos: [] };
  }

  // Helper para validar limite mensal de di√°rias
  private async validarLimiteMensalDiarias(servidorId: number, dataOperacao: string) {
    const hoje = new Date();
    const ano = hoje.getFullYear();
    const mes = hoje.getMonth() + 1;
    
    const diariasNoMes = await this.servidorRepository.contarDiariasNoMes(servidorId, ano, mes);
    const limiteMensal = await this.parametrizacaoService.limiteMensalDiarias();
    
    if (diariasNoMes >= limiteMensal) {
      return { podeParticipar: false, motivos: [`Servidor j√° atingiu limite mensal de ${limiteMensal} di√°rias`] };
    }
    return { podeParticipar: true, motivos: [] };
  }
} 