/**
 * Exemplo de uso das ferramentas de migra√ß√£o
 */

import { 
  MigrationTools, 
  MigrationCLI, 
  migrateLegacyHooks, 
  analyzeLegacyHooks 
} from '../index';

/**
 * Exemplo 1: An√°lise r√°pida de um arquivo
 */
async function analyzeFileExample() {
  console.log('üîç Exemplo 1: An√°lise de arquivo √∫nico\n');
  
  try {
    const analysis = await MigrationTools.analyzeFile('./src/components/Calendar.tsx');
    
    console.log(`üìÑ Arquivo: ${analysis.filePath}`);
    console.log(`üî¢ Hooks encontrados: ${analysis.totalHookUsages}`);
    console.log(`üìä Complexidade: ${analysis.complexity}`);
    console.log(`üí° Estrat√©gia recomendada: ${analysis.migrationRecommendation.strategy}`);
    
    if (analysis.hookPatterns.length > 0) {
      console.log('\nüìã Hooks detectados:');
      analysis.hookPatterns.forEach(pattern => {
        console.log(`  ‚Ä¢ ${pattern.hookName} (linha ${pattern.lineNumber})`);
      });
    }
    
    if (analysis.migrationRecommendation.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è Avisos:');
      analysis.migrationRecommendation.warnings.forEach(warning => {
        console.log(`  ‚Ä¢ ${warning}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
  }
  
  console.log('\n' + '='.repeat(50) + '\n');
}

/**
 * Exemplo 2: An√°lise de diret√≥rio completo
 */
async function analyzeDirectoryExample() {
  console.log('üîç Exemplo 2: An√°lise de diret√≥rio\n');
  
  try {
    const analyses = await MigrationTools.analyzeDirectory('./src/components');
    
    console.log(`üìÅ Diret√≥rio analisado: ./src/components`);
    console.log(`üìÑ Arquivos com hooks legados: ${analyses.length}`);
    
    if (analyses.length > 0) {
      const totalHooks = analyses.reduce((sum, a) => sum + a.totalHookUsages, 0);
      const complexFiles = analyses.filter(a => a.complexity === 'complex').length;
      
      console.log(`üî¢ Total de hooks legados: ${totalHooks}`);
      console.log(`‚ö†Ô∏è Arquivos complexos: ${complexFiles}`);
      
      console.log('\nüìã Resumo por arquivo:');
      analyses.forEach(analysis => {
        const fileName = analysis.filePath.split('/').pop();
        console.log(`  ‚Ä¢ ${fileName}: ${analysis.totalHookUsages} hooks (${analysis.complexity})`);
      });
      
      // Estat√≠sticas de hooks
      const hookCounts: Record<string, number> = {};
      analyses.forEach(analysis => {
        analysis.hookPatterns.forEach(pattern => {
          hookCounts[pattern.hookName] = (hookCounts[pattern.hookName] || 0) + 1;
        });
      });
      
      console.log('\nüìä Hooks mais utilizados:');
      Object.entries(hookCounts)
        .sort((a, b) => b[1] - a[1])
        .forEach(([hook, count]) => {
          console.log(`  ‚Ä¢ ${hook}: ${count} ocorr√™ncias`);
        });
    } else {
      console.log('‚úÖ Nenhum hook legado encontrado!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
  }
  
  console.log('\n' + '='.repeat(50) + '\n');
}

/**
 * Exemplo 3: Migra√ß√£o com dry-run
 */
async function dryRunMigrationExample() {
  console.log('üß™ Exemplo 3: Migra√ß√£o em modo dry-run\n');
  
  try {
    console.log('Executando migra√ß√£o em modo dry-run (sem aplicar mudan√ßas)...\n');
    
    await MigrationTools.migrate('./src/components/calendario', {
      dryRun: true,
      skipValidation: false,
      force: true
    });
    
    console.log('‚úÖ Dry-run conclu√≠do! Verifique o relat√≥rio gerado.');
    console.log('üìÑ Relat√≥rio: ./migration-reports/migration-analysis.html');
    
  } catch (error) {
    console.error('‚ùå Erro no dry-run:', error);
  }
  
  console.log('\n' + '='.repeat(50) + '\n');
}

/**
 * Exemplo 4: Migra√ß√£o completa com CLI avan√ßado
 */
async function advancedMigrationExample() {
  console.log('üöÄ Exemplo 4: Migra√ß√£o completa com CLI avan√ßado\n');
  
  try {
    const cli = new MigrationCLI({
      includePatterns: ['**/components/**/*.tsx', '**/hooks/**/*.ts'],
      excludePatterns: ['**/*.test.*', '**/*.spec.*', '**/node_modules/**'],
      createBackups: true,
      validateAfterMigration: true,
      runTests: false,
      outputDir: './migration-reports',
      reportFormat: 'html'
    });
    
    // 1. An√°lise inicial
    console.log('üìä Executando an√°lise inicial...');
    const analyses = await cli.analyze('./src/components');
    
    if (analyses.length === 0) {
      console.log('‚úÖ Nenhum hook legado encontrado para migra√ß√£o.');
      return;
    }
    
    console.log(`üìã Encontrados ${analyses.length} arquivos com hooks legados`);
    
    // 2. Migra√ß√£o
    console.log('\n‚ö° Executando migra√ß√£o...');
    await cli.migrate('./src/components', {
      dryRun: false,
      skipValidation: false,
      force: true // Para exemplo, pular confirma√ß√£o
    });
    
    // 3. Valida√ß√£o adicional
    console.log('\n‚úÖ Executando valida√ß√£o adicional...');
    const validations = await cli.validate('./src/components');
    
    const validFiles = validations.filter(v => v.isValid).length;
    const invalidFiles = validations.length - validFiles;
    
    console.log(`‚úÖ Arquivos v√°lidos: ${validFiles}`);
    console.log(`‚ö†Ô∏è Arquivos com problemas: ${invalidFiles}`);
    
    if (invalidFiles > 0) {
      console.log('\n‚ö†Ô∏è Alguns arquivos apresentaram problemas na valida√ß√£o.');
      console.log('üìÑ Verifique o relat√≥rio detalhado: ./migration-reports/validation-report.html');
    }
    
    console.log('\nüéâ Migra√ß√£o conclu√≠da!');
    console.log('üìÑ Relat√≥rios gerados em: ./migration-reports/');
    
  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o avan√ßada:', error);
  }
  
  console.log('\n' + '='.repeat(50) + '\n');
}

/**
 * Exemplo 5: Valida√ß√£o de arquivos j√° migrados
 */
async function validationExample() {
  console.log('‚úÖ Exemplo 5: Valida√ß√£o de arquivos migrados\n');
  
  try {
    const validations = await MigrationTools.validate('./src/components');
    
    if (validations.length === 0) {
      console.log('‚ÑπÔ∏è Nenhum arquivo migrado encontrado para valida√ß√£o.');
      return;
    }
    
    console.log(`üìÑ Arquivos validados: ${validations.length}`);
    
    const validCount = validations.filter(v => v.isValid).length;
    const invalidCount = validations.length - validCount;
    
    console.log(`‚úÖ V√°lidos: ${validCount}`);
    console.log(`‚ùå Com problemas: ${invalidCount}`);
    
    if (invalidCount > 0) {
      console.log('\n‚ö†Ô∏è Problemas encontrados:');
      validations.forEach((validation, index) => {
        if (!validation.isValid) {
          console.log(`\nüìÑ Arquivo ${index + 1}:`);
          validation.errors.forEach(error => {
            console.log(`  ‚ùå ${error.type}: ${error.message}`);
          });
        }
      });
    }
    
    // Verificar resultados de testes
    const testsRun = validations.filter(v => v.testResults && v.testResults.length > 0);
    if (testsRun.length > 0) {
      console.log('\nüß™ Resultados dos testes:');
      testsRun.forEach(validation => {
        validation.testResults?.forEach(test => {
          const status = test.passed ? '‚úÖ' : '‚ùå';
          console.log(`  ${status} ${test.testName} (${test.duration}ms)`);
        });
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o:', error);
  }
  
  console.log('\n' + '='.repeat(50) + '\n');
}

/**
 * Exemplo 6: Rollback usando backups
 */
async function rollbackExample() {
  console.log('üîÑ Exemplo 6: Rollback usando backups\n');
  
  try {
    console.log('‚ö†Ô∏è ATEN√á√ÉO: Este exemplo ir√° reverter arquivos migrados!');
    console.log('Certifique-se de que deseja continuar...\n');
    
    // Em um cen√°rio real, voc√™ pediria confirma√ß√£o do usu√°rio aqui
    
    await MigrationTools.rollback('./src/components');
    
    console.log('‚úÖ Rollback conclu√≠do!');
    console.log('üìÑ Arquivos revertidos para vers√µes anteriores usando backups.');
    
  } catch (error) {
    console.error('‚ùå Erro no rollback:', error);
  }
  
  console.log('\n' + '='.repeat(50) + '\n');
}

/**
 * Exemplo 7: Uso das fun√ß√µes utilit√°rias
 */
async function utilityFunctionsExample() {
  console.log('üõ†Ô∏è Exemplo 7: Fun√ß√µes utilit√°rias\n');
  
  try {
    // An√°lise r√°pida usando fun√ß√£o utilit√°ria
    console.log('üìä An√°lise r√°pida com analyzeLegacyHooks:');
    const quickAnalysis = await analyzeLegacyHooks('./src/components');
    console.log(`Arquivos analisados: ${quickAnalysis.length}`);
    
    // Migra√ß√£o r√°pida usando fun√ß√£o utilit√°ria
    console.log('\nüöÄ Migra√ß√£o r√°pida com migrateLegacyHooks:');
    await migrateLegacyHooks('./src/components', {
      dryRun: true, // Sempre usar dry-run em exemplos
      skipValidation: false,
      force: true
    });
    
    console.log('‚úÖ Fun√ß√µes utilit√°rias executadas com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro nas fun√ß√µes utilit√°rias:', error);
  }
  
  console.log('\n' + '='.repeat(50) + '\n');
}

/**
 * Fun√ß√£o principal que executa todos os exemplos
 */
async function runAllExamples() {
  console.log('üéØ Exemplos de Uso das Ferramentas de Migra√ß√£o\n');
  console.log('Este script demonstra como usar as ferramentas de migra√ß√£o de hooks realtime.\n');
  
  // Executar exemplos em sequ√™ncia
  await analyzeFileExample();
  await analyzeDirectoryExample();
  await dryRunMigrationExample();
  await advancedMigrationExample();
  await validationExample();
  // await rollbackExample(); // Comentado para evitar revers√µes acidentais
  await utilityFunctionsExample();
  
  console.log('üéâ Todos os exemplos foram executados!');
  console.log('\nüìö Para mais informa√ß√µes, consulte:');
  console.log('  ‚Ä¢ Guia de Migra√ß√£o: ./MIGRATION_GUIDE.md');
  console.log('  ‚Ä¢ Documenta√ß√£o da API: ./README.md');
  console.log('  ‚Ä¢ Testes: ./tests/');
}

/**
 * Exemplo de configura√ß√£o personalizada
 */
function customConfigurationExample() {
  console.log('‚öôÔ∏è Exemplo de configura√ß√£o personalizada:\n');
  
  const customConfig = {
    includePatterns: [
      '**/components/**/*.tsx',
      '**/pages/**/*.tsx',
      '**/hooks/**/*.ts'
    ],
    excludePatterns: [
      '**/*.test.*',
      '**/*.spec.*',
      '**/node_modules/**',
      '**/dist/**',
      '**/.next/**'
    ],
    createBackups: true,
    validateAfterMigration: true,
    runTests: true,
    targetHook: 'useRealtimeUnified',
    legacyHooks: [
      'useRealtimePuro',
      'useRealtimeSimple',
      'useRealtimeOperacoes',
      'useRealtimeEventos'
    ],
    outputDir: './custom-migration-reports',
    reportFormat: 'html' as const
  };
  
  console.log('Configura√ß√£o personalizada:');
  console.log(JSON.stringify(customConfig, null, 2));
  
  console.log('\nUso com configura√ß√£o personalizada:');
  console.log(`
const cli = new MigrationCLI(customConfig);
await cli.migrate('./src');
  `);
}

// Executar exemplos se este arquivo for executado diretamente
if (require.main === module) {
  runAllExamples().catch(console.error);
}

// Exportar fun√ß√µes para uso em outros arquivos
export {
  analyzeFileExample,
  analyzeDirectoryExample,
  dryRunMigrationExample,
  advancedMigrationExample,
  validationExample,
  rollbackExample,
  utilityFunctionsExample,
  customConfigurationExample,
  runAllExamples
};