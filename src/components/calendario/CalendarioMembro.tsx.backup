'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isToday, startOfWeek, endOfWeek } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useRealtimeUnified } from '@/hooks/useRealtimeUnified';
import { OperacaoDialog } from './OperacaoDialog';
import { supabase } from '@/lib/supabase';
// @ts-ignore - react-hot-toast ser√° instalado
import { toast } from 'react-hot-toast';
import styles from './Calendario.module.css';



interface Operacao {
  id: number;
  dataOperacao: string;
  data_operacao: string; // ‚úÖ Campo do banco
  modalidade: 'BLITZ' | 'BALANCA';
  tipo: 'PLANEJADA' | 'VOLUNTARIA';
  turno: string;
  horario?: string;
  limiteParticipantes: number;
  limite_participantes: number; // ‚úÖ Campo do banco
  participantesAtuais?: number;
  participantes_confirmados?: number; // ‚úÖ Campo calculado pela API
  pessoas_na_fila?: number; // ‚úÖ Campo calculado pela API
  janelaId: number;
  status: string;
  total_solicitacoes?: number; // ‚úÖ Campo calculado pela API
  ativa?: boolean; // ‚úÖ Campo do banco
  excluida_temporariamente?: boolean; // ‚úÖ Campo do banco
  updated_at?: string; // ‚úÖ Campo do banco
  janela?: {
    id: number;
    dataInicio: string;
    dataFim: string;
    modalidades: string;
  };
  minha_participacao?: {
    estado_visual: 'CONFIRMADO' | 'PENDENTE' | 'NA_FILA' | 'DISPONIVEL';
    posicao_fila?: number;
  };
}

export const CalendarioMembro: React.FC = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [membros, setMembros] = useState<Array<{ id: number, nome: string, matricula: string }>>([]);
  const [membroAtual, setMembroAtual] = useState<string>(() => {
    // ‚úÖ CORRE√á√ÉO: Inicializar com ID do membro logado
    if (typeof window !== 'undefined') {
      const membroAuth = localStorage.getItem('membroAuth');
      if (membroAuth) {
        try {
          const dados = JSON.parse(membroAuth);
          return dados.id?.toString() || '1';
        } catch {
          return '1';
        }
      }
      return localStorage.getItem('membroId') || '1';
    }
    return '1';
  });
  const [loading, setLoading] = useState<number | null>(null);

  // ‚úÖ NOVO: Estados pr√≥prios para fetch (padr√£o da nova arquitetura)
  const [operacoes, setOperacoes] = useState<Operacao[]>([]);
  const [loadingOperacoes, setLoadingOperacoes] = useState(true);

  // ‚úÖ NOVO: Estado para controlar exibi√ß√£o da √°rea de desenvolvimento
  const [mostrarAreaDesenvolvimento, setMostrarAreaDesenvolvimento] = useState(false);

  // ‚úÖ FUN√á√ÉO DE FETCH UNIFICADA (substitui useOperacoes)
  const fetchOperacoes = React.useCallback(async () => {
    const startDate = startOfMonth(currentDate);
    const endDate = endOfMonth(currentDate);

    // ‚úÖ USAR SEMPRE O ID DA AUTENTICA√á√ÉO (n√£o localStorage)
    const membroId = membroAtual;

    setLoadingOperacoes(true);

    try {
      const params = new URLSearchParams({
        startDate: format(startDate, 'yyyy-MM-dd'),
        endDate: format(endDate, 'yyyy-MM-dd'),
        membroId,
        _t: Date.now().toString()
      });

      const response = await fetch(`/api/unified/operacoes?${params}`, {
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();

      if (data.success) {
        setOperacoes(data.data || []);
      } else {
        throw new Error(data.error || 'Erro ao buscar opera√ß√µes');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erro ao conectar com o servidor';
      toast.error('Erro ao carregar opera√ß√µes');
      setOperacoes([]);
    } finally {
      setLoadingOperacoes(false);
    }
  }, [currentDate, membroAtual]);

  // ‚úÖ FUN√á√ÉO REFETCH (compatibilidade com c√≥digo existente)
  const refetch = React.useCallback(() => {
    fetchOperacoes();
  }, [fetchOperacoes]);

  // ‚úÖ HOOK REALTIME UNIFICADO: Migrado para useRealtimeUnified
  const { isConnected } = useRealtimeUnified({
    channelId: `calendario-membro-${membroAtual}`,
    tables: ['operacao', 'participacao'],
    enableRealtime: true,
    enablePolling: false,
    enableFetch: false,
    debug: false,
    onDatabaseChange: useCallback((event: any) => {
      const { table, eventType, payload } = event;
      
      if (table === 'operacao') {
        if (eventType === 'UPDATE') {
          const operacaoId = payload.new.id;

          setOperacoes(prev => {
            const novasOperacoes = prev.map(op =>
              op.id === operacaoId ? {
                ...op,
                // ‚úÖ ATUALIZAR: Apenas campos que realmente v√™m da tabela operacao
                ativa: payload.new.ativa,
                excluida_temporariamente: payload.new.excluida_temporariamente,
                updated_at: payload.new.updated_at,
                status: payload.new.status,
                limite_participantes: payload.new.limite_participantes,
                modalidade: payload.new.modalidade,
                tipo: payload.new.tipo,
                turno: payload.new.turno,
                horario: payload.new.horario,
                data_operacao: payload.new.data_operacao
                // ‚ùå N√ÉO ATUALIZAR: participantes_confirmados e total_solicitacoes
                // Esses campos s√£o calculados pela API e ser√£o atualizados no reload silencioso
              } : op
            );

            return novasOperacoes;
          });
          return;
        }

        // Processar outros tipos de eventos
        setOperacoes(prevOperacoes => {
          const operacoesArray = Array.isArray(prevOperacoes) ? prevOperacoes : [];

          if (eventType === 'INSERT') {
            // ‚úÖ INSERIR: Adicionar nova opera√ß√£o
            return [...operacoesArray, payload.new];
          } else if (eventType === 'DELETE') {
            // ‚úÖ DELETAR: Remover opera√ß√£o
            return operacoesArray.filter(op => op.id !== payload.old.id);
          }
          return operacoesArray;
        });
      } else if (table === 'participacao') {
        const operacaoId = payload.new?.operacao_id || payload.old?.operacao_id;

        // üö® SOLU√á√ÉO ROBUSTA: Se operacao_id est√° undefined, for√ßar reload completo
        if (!operacaoId) {
          setTimeout(() => {
            fetchOperacoes();
          }, 500);
          return;
        }

        // üöÄ SOLU√á√ÉO ROBUSTA: Reload garantido com timeout menor
        setTimeout(() => {
          fetchOperacoes();
        }, 500);
      }
    }, [fetchOperacoes, operacoes])
  });

  // ‚úÖ NOVA FUN√á√ÉO: Verificar se deve mostrar √°rea de desenvolvimento
  const verificarAreaDesenvolvimento = React.useCallback(async () => {
    try {
      const response = await fetch('/api/configuracoes/area-desenvolvimento');

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setMostrarAreaDesenvolvimento(data.mostrar);
        } else {
          setMostrarAreaDesenvolvimento(false);
        }
      } else {
        setMostrarAreaDesenvolvimento(false);
      }
    } catch (error) {
      setMostrarAreaDesenvolvimento(false);
    }
  }, []);

  // ‚úÖ FETCH INICIAL: Carregar opera√ß√µes quando componente monta ou m√™s muda
  React.useEffect(() => {
    fetchOperacoes();
  }, [fetchOperacoes]);

  // ‚úÖ VERIFICAR √ÅREA DE DESENVOLVIMENTO: Quando componente monta ou usu√°rio muda
  React.useEffect(() => {
    verificarAreaDesenvolvimento();
  }, [verificarAreaDesenvolvimento]);

  // ‚úÖ ATUALIZAR CANAL REALTIME quando membro muda
  React.useEffect(() => {
    // O hook useRealtime j√° reconecta automaticamente com novo channelId
  }, [membroAtual]);

  // ‚úÖ FUN√á√ïES: A√ß√µes r√°pidas nos quadradinhos
  const handleQuickEuVou = async (operacaoId: number, event: React.MouseEvent) => {
    event.stopPropagation(); // Impede que abra o modal

    // ‚úÖ USAR SEMPRE O ID DA AUTENTICA√á√ÉO (n√£o localStorage)
    const membroId = membroAtual;

    setLoading(operacaoId);

    try {
      const response = await fetch(`/api/participations`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          action: 'join',
          operationId: operacaoId.toString(),
          membroId: membroId
        })
      });

      const data = await response.json();

      if (data.success) {
        toast.success(data.data.mensagem || 'Participa√ß√£o confirmada!');
        refetch();
      } else {
        toast.error(data.error || 'Erro ao confirmar participa√ß√£o');
      }
    } catch (error) {
      toast.error('Erro ao processar solicita√ß√£o');
    } finally {
      setLoading(null);
    }
  };

  const handleQuickCancelar = async (operacaoId: number, event: React.MouseEvent) => {
    event.stopPropagation();

    // ‚úÖ USAR SEMPRE O ID DA AUTENTICA√á√ÉO (n√£o localStorage)
    const membroId = membroAtual;

    setLoading(operacaoId);

    try {
      const response = await fetch('/api/agendamento/cancelar', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          membroId: membroId,
          operacaoId: operacaoId
        })
      });

      const data = await response.json();

      if (data.success) {
        toast.success(data.data.mensagem || 'Participa√ß√£o cancelada!');
        refetch();
      } else {
        toast.error(data.error || 'Erro ao cancelar participa√ß√£o');
      }
    } catch (error) {
      toast.error('Erro ao processar cancelamento');
    } finally {
      setLoading(null);
    }
  };

  // ‚úÖ FUN√á√ÉO: Determinar a√ß√£o r√°pida para opera√ß√£o √∫nica
  // üéØ L√ìGICA DO BOT√ÉO DIN√ÇMICO:
  // 1. "EU VOU" (verde) - quando h√° vagas diretas dispon√≠veis
  // 2. "ENTRAR NA FILA" (amarelo) - quando vagas est√£o ocupadas mas h√° espa√ßo na fila
  // 3. "LOTADO" (vermelho) - quando n√£o h√° espa√ßo nem na fila (mas mant√©m clic√°vel para transpar√™ncia)
  const getQuickActionInfo = (operacao: any) => {
    const estado = operacao.minha_participacao?.estado_visual;

    // ‚úÖ CORRE√á√ÉO: Se tem participa√ß√£o, verificar estado
    if (estado === 'CONFIRMADO' || estado === 'ADICIONADO_SUP') {
      return {
        text: 'CANCELAR',
        action: 'cancelar',
        className: styles.quickCancel,
        available: true
      };
    }

    if (estado === 'PENDENTE' || estado === 'NA_FILA') {
      return {
        text: 'CANCELAR',
        action: 'cancelar',
        className: styles.quickCancel,
        available: true
      };
    }

    // ‚úÖ CORRE√á√ÉO CR√çTICA: Se n√£o tem participa√ß√£o (deletada pelo supervisor), recalcular baseado na opera√ß√£o
    // N√£o importa se havia participa√ß√£o antes - o que importa √© o estado atual da opera√ß√£o
    const confirmados = operacao.participantes_confirmados || 0;
    const pendentes = operacao.total_solicitacoes || operacao.pessoas_na_fila || 0; // ‚úÖ CORRE√á√ÉO: usar total_solicitacoes (inclui PENDENTE)
    const limite = operacao.limite_participantes;

    // Total de pessoas na opera√ß√£o = confirmados + pendentes
    const totalPessoas = confirmados + pendentes;

    // ‚úÖ NOVA L√ìGICA: Baseada apenas no estado atual da opera√ß√£o
    if (totalPessoas < limite) {
      // H√° vagas diretas dispon√≠veis -> "EU VOU" (verde)
      return {
        text: 'EU VOU',
        action: 'participar',
        className: styles.quickParticipate,
        available: true
      };
    } else if (totalPessoas < (limite * 2)) {
      // Opera√ß√£o cheia mas h√° espa√ßo na fila de espera -> "ENTRAR NA FILA" (amarelo)
      return {
        text: 'ENTRAR NA FILA',
        action: 'participar',
        className: styles.quickQueue,
        available: true
      };
    } else {
      // Opera√ß√£o + fila completamente lotadas -> "LOTADO" (vermelho)
      return {
        text: 'LOTADO',
        action: 'lotado',
        className: styles.quickLotado,
        available: true // Vis√≠vel mas n√£o funcional
      };
    }
  };

  // Carregar lista de membros
  useEffect(() => {
    const carregarMembros = async () => {
      try {
        const response = await fetch('/api/supervisor/membros');
        if (response.ok) {
          const data = await response.json();
          setMembros(data.data || []);
        }
      } catch (error) {
        // ‚ö†Ô∏è Fallback apenas se n√£o conseguir carregar do backend
        setMembros([
          { id: 6, nome: 'Administrador Principal', matricula: 'unmistk' },
          { id: 32, nome: 'CIDNO FABR√çCIO DOS SANTOS LIMA', matricula: '3006323' },
          { id: 33, nome: 'ANT√îNIO CRISTI√É DA SILVA', matricula: '3006325' },
          { id: 34, nome: 'ANT√îNIO IVANILDO CAETANO COSTA', matricula: '1541' },
          { id: 35, nome: 'IDIONY GON√áALVES DOS SANTOS', matricula: '3006362' },
          { id: 42, nome: 'DOUGLAS ALBERTO DOS SANTOS', matricula: '3006363' }
        ]);
      }
    };
    carregarMembros();
  }, []);

  // ‚úÖ INICIALIZAR MEMBRO ATUAL (PELA AUTENTICA√á√ÉO)
  useEffect(() => {
    const membroAuth = localStorage.getItem('membroAuth');

    if (!membroAuth) {
      alert('Erro: Voc√™ n√£o est√° logado! Redirecionando para login...');
      window.location.href = '/membro/auth';
      return;
    }

    try {
      const userData = JSON.parse(membroAuth);

      if (!userData.id || !userData.autenticado) {
        alert('Erro: Dados de autentica√ß√£o inv√°lidos! Fa√ßa login novamente.');
        localStorage.removeItem('membroAuth');
        window.location.href = '/membro/auth';
        return;
      }

      const membroId = userData.id.toString();
      setMembroAtual(membroId);

    } catch (error) {
      alert('Erro: Falha na autentica√ß√£o! Fa√ßa login novamente.');
      localStorage.removeItem('membroAuth');
      window.location.href = '/membro/auth';
    }
  }, []);

  // Trocar membro para teste
  const handleMembroChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const novoMembroId = e.target.value;

    setMembroAtual(novoMembroId);
    localStorage.setItem('membroId', novoMembroId);
    refetch();
  };

  // Gerar dias do calend√°rio
  const monthStart = startOfMonth(currentDate);
  const monthEnd = endOfMonth(currentDate);
  const calendarStart = startOfWeek(monthStart, { weekStartsOn: 1 }); // Segunda-feira
  const calendarEnd = endOfWeek(monthEnd, { weekStartsOn: 1 });

  const dias = eachDayOfInterval({ start: calendarStart, end: calendarEnd });

  // Agrupar opera√ß√µes por dia - usando SOMENTE campos do banco real
  const operacoesPorDia = operacoes?.reduce((acc, op: any) => {
    // SOMENTE usar campo do banco: data_operacao
    const dataOp = op.data_operacao;
    if (!dataOp) {
      return acc;
    }
    // Garantir que n√£o h√° problemas de timezone
    const key = dataOp.includes('T') ? dataOp.split('T')[0] : dataOp;
    if (!acc[key]) acc[key] = [];
    acc[key].push(op);
    return acc;
  }, {} as Record<string, any[]>) || {};

  // Navega√ß√£o limpa
  const handlePrevMonth = () => {
    setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() - 1));
  };

  const handleNextMonth = () => {
    setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() + 1));
  };

  // Fun√ß√£o para voltar ao m√™s atual
  const handleGoToToday = () => {
    setCurrentDate(new Date());
    // N√£o seleciona o dia atual para evitar abrir o modal
  };

  // ‚úÖ FUNCIONALIDADE TECLADO: ESC para fechar modal, ESPA√áO para refresh
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      // ESC: Fechar modal se estiver aberto
      if (event.key === 'Escape' && selectedDate) {
        setSelectedDate(null);
      }

      // ESPA√áO: Refresh das opera√ß√µes (mesmo efeito do bot√£o refresh)
      if (event.key === ' ' || event.code === 'Space') {
        // Prevenir scroll da p√°gina
        event.preventDefault();

        // S√≥ executar se n√£o estiver em um input ou textarea
        const activeElement = document.activeElement;
        const isInputField = activeElement && (
          activeElement.tagName === 'INPUT' ||
          activeElement.tagName === 'TEXTAREA' ||
          activeElement.tagName === 'SELECT' ||
          activeElement.getAttribute('contenteditable') === 'true'
        );

        if (!isInputField) {
          // Chamar a mesma fun√ß√£o do bot√£o refresh
          refetch();
          // Feedback visual discreto
          toast.success('Calend√°rio atualizado!', {
            duration: 1500,
            style: {
              fontSize: '0.875rem',
              padding: '0.5rem 0.75rem'
            }
          });
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [selectedDate, refetch]);

  // ‚úÖ FUN√á√ÉO: Lidar com clique no dia (sempre abre modal, exceto quando clica no bot√£o)
  const handleDayClick = (dia: Date, operacoesDia: any[]) => {
    // Sempre abre o modal quando clica no dia (bot√£o r√°pido √© s√≥ conveni√™ncia)
    setSelectedDate(dia);
  };

  // ‚úÖ FUN√á√ÉO: Obter dados do usu√°rio logado
  const getUserData = () => {
    try {
      const membroAuth = localStorage.getItem('membroAuth');
      if (membroAuth) {
        const userData = JSON.parse(membroAuth);
        return {
          nome: userData.nome,
          matricula: userData.matricula,
          regionalId: userData.regionalId
        };
      }
    } catch (error) {
      // Erro silencioso
    }
    return null;
  };

  const userData = getUserData();

  // ‚úÖ FUN√á√ÉO: Logout
  const handleLogout = () => {
    if (confirm('Deseja realmente sair do sistema?')) {
      localStorage.removeItem('membroAuth');
      localStorage.removeItem('membroId');
      window.location.href = '/';
    }
  };

  return (
    <div className={styles.mainLayout}>
      {/* Header Discreto do Usu√°rio */}
      {userData && (
        <header className={styles.userHeader}>
          <div className={styles.userHeaderContent}>
            <div className={styles.userInfo}>
              <div className={styles.userAvatar}>
                {userData.nome.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase()}
              </div>
              <div className={styles.userDetails}>
                <span className={styles.userName}>{userData.nome}</span>
                <span className={styles.userMatricula}>Mat. {userData.matricula}</span>
              </div>
            </div>
            <button
              onClick={handleLogout}
              className={styles.logoutButton}
              title="Sair do sistema"
            >
              Sair
            </button>
          </div>
        </header>
      )}

      {/* Container Principal com Sidebar e Calend√°rio */}
      <div className={styles.mainContent}>
        {/* ‚úÖ Sidebar Esquerda - √Årea de Desenvolvimento (condicional) */}
        {mostrarAreaDesenvolvimento && (
          <aside className={styles.sidebarLeft}>
            <div className={styles.sidebarPlaceholder}>
              <div className={styles.icon}>‚öôÔ∏è</div>
              <div>
                <h3>√Årea de Desenvolvimento</h3>
                <p>Esta se√ß√£o ser√° utilizada para futuras funcionalidades.</p>

                {/* Seletor de Membro para Teste */}
                <div style={{ marginBottom: '1rem', padding: '0.75rem', backgroundColor: 'rgba(0,0,0,0.05)', borderRadius: '8px', border: '1px dashed #ccc' }}>
                  <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: '600', marginBottom: '0.5rem', color: '#666' }}>
                    üß™ Teste - Trocar Membro:
                  </label>
                  <select
                    value={membroAtual}
                    onChange={handleMembroChange}
                    style={{
                      width: '100%',
                      padding: '0.5rem',
                      borderRadius: '4px',
                      border: '1px solid #ccc',
                      fontSize: '0.875rem',
                      backgroundColor: 'var(--bg-card)'
                    }}
                  >
                    {membros.map(membro => (
                      <option key={membro.id} value={membro.id.toString()}>
                        {membro.nome} ({membro.matricula})
                      </option>
                    ))}
                  </select>
                  <small style={{ display: 'block', marginTop: '0.25rem', fontSize: '0.75rem', color: '#666' }}>
                    Membro atual: ID {membroAtual}
                  </small>
                </div>

                <ul>
                  <li>üìÖ Filtros avan√ßados</li>
                  <li>üìù Minhas opera√ß√µes</li>
                  <li>üîç Busca por data</li>
                  <li>üìä Estat√≠sticas pessoais</li>
                </ul>
              </div>
            </div>
          </aside>
        )}

        {/* √Årea Principal do Calend√°rio */}
        <main className={styles.calendarArea}>
          <div className={styles.calendarContainer}>
            {/* Header do Calend√°rio */}
            <header className={styles.calendarHeader}>
              <div className={styles.leftButtons}>
                <button
                  className={styles.navButton}
                  onClick={handlePrevMonth}
                  aria-label="M√™s anterior"
                >
                  <ChevronLeft size={20} />
                  Anterior
                </button>

                <button
                  className={styles.todayButton}
                  onClick={handleGoToToday}
                  aria-label="Ir para hoje"
                >
                  HOJE
                </button>
              </div>

              <h1 className={styles.monthYear}>
                {format(currentDate, 'MMMM yyyy', { locale: ptBR })}
              </h1>

              <button
                className={styles.navButton}
                onClick={handleNextMonth}
                aria-label="Pr√≥ximo m√™s"
              >
                Pr√≥ximo
                <ChevronRight size={20} />
              </button>
            </header>

            {/* Grid do Calend√°rio */}
            <div className={styles.calendarContent}>
              <div className={styles.calendarGridWrapper}>
                <div className={styles.calendarGrid}>
                  {/* Dias da semana */}
                  {['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b', 'Dom'].map(dia => (
                    <div key={dia} className={styles.dayName}>
                      {dia}
                    </div>
                  ))}

                  {/* Dias do m√™s */}
                  {dias.map(dia => {
                    const key = format(dia, 'yyyy-MM-dd');
                    const operacoesDia = operacoesPorDia[key] || [];
                    const isCurrentMonth = isSameMonth(dia, currentDate);
                    const isHoje = isToday(dia);
                    const isSelected = selectedDate && format(selectedDate, 'yyyy-MM-dd') === key;

                    // ‚úÖ NOVA L√ìGICA: Determinar se tem opera√ß√£o √∫nica
                    const hasUniqueOperation = operacoesDia.length === 1;
                    const uniqueOperation = hasUniqueOperation ? operacoesDia[0] : null;
                    const quickActionInfo = uniqueOperation ? getQuickActionInfo(uniqueOperation) : null;

                    // Determinar tipo de opera√ß√µes no dia para cores leves
                    const temBLITZ = operacoesDia.some((op: any) => op.modalidade === 'BLITZ');
                    const temBALANCA = operacoesDia.some((op: any) => op.modalidade === 'BALANCA');
                    const temMultiplas = temBLITZ && temBALANCA;

                    return (
                      <div
                        key={key}
                        className={`
                        ${styles.dayCell} 
                        ${!isCurrentMonth ? styles.otherMonth : ''}
                        ${isHoje ? styles.currentDay : ''}
                        ${isSelected ? styles.selected : ''}
                        ${operacoesDia.length > 0 ? styles.hasOperacoes : ''}
                        ${hasUniqueOperation ? styles.singleOperationCell : ''}
                        ${temMultiplas ? styles.lightMultiple : ''}
                        ${!temMultiplas && temBLITZ ? styles.lightBLITZ : ''}
                        ${!temMultiplas && temBALANCA ? styles.lightBALANCA : ''}
                      `}
                        onClick={() => handleDayClick(dia, operacoesDia)}
                        tabIndex={0}
                        role="button"
                        aria-label={`${format(dia, 'd')} de ${format(dia, 'MMMM', { locale: ptBR })}`}
                      >
                        <div className={styles.dayNumber}>
                          {format(dia, 'd')}
                        </div>

                        {operacoesDia.length > 0 && (
                          <div className={styles.operacaoInfo}>
                            {hasUniqueOperation ? (
                              // ‚úÖ OPERA√á√ÉO √öNICA: Mostrar com bot√£o r√°pido
                              <div className={styles.singleOperationInfo}>
                                {/* Header compacto com layout vertical */}
                                <div className={styles.compactHeader}>
                                  <div className={styles.modalidadeRow}>
                                    <span 
                                      className={styles.modalidadeName}
                                      data-modalidade={uniqueOperation.modalidade}
                                    >
                                      {uniqueOperation.modalidade}
                                    </span>
                                  </div>
                                  <div className={styles.statsRow}>
                                    <span className={styles.participantStats}>
                                      {uniqueOperation.participantes_confirmados || 0}/{uniqueOperation.limite_participantes}
                                      {(uniqueOperation.total_solicitacoes || uniqueOperation.pessoas_na_fila || 0) > 0 && (
                                        <span className={styles.queueIndicator}>
                                          +{uniqueOperation.total_solicitacoes || uniqueOperation.pessoas_na_fila}
                                        </span>
                                      )}
                                    </span>
                                  </div>
                                </div>

                                {/* ‚úÖ BOT√ÉO R√ÅPIDO - CSS-ONLY RESPONSIVO */}
                                {quickActionInfo && quickActionInfo.available && (
                                  <button
                                    className={`${styles.quickActionButton} ${quickActionInfo.className}`}
                                    data-action={quickActionInfo.action}
                                    onClick={(e) => {
                                      if (quickActionInfo.action === 'cancelar') {
                                        handleQuickCancelar(uniqueOperation.id, e);
                                      } else if (quickActionInfo.action === 'participar') {
                                        handleQuickEuVou(uniqueOperation.id, e);
                                      } else if (quickActionInfo.action === 'lotado') {
                                        // ‚úÖ CORRE√á√ÉO: N√£o executa nada - apenas visual
                                        e.stopPropagation();
                                        return;
                                      }
                                    }}
                                    disabled={loading === uniqueOperation.id}
                                    title={
                                      quickActionInfo.action === 'cancelar' ? 'Cancelar participa√ß√£o' :
                                        quickActionInfo.action === 'participar' ? 'Confirmar participa√ß√£o' :
                                          quickActionInfo.action === 'lotado' ? 'Opera√ß√£o lotada - apenas informativo' :
                                            ''
                                    }
                                  >
                                    {loading === uniqueOperation.id ? '...' : ''}
                                  </button>
                                )}
                              </div>
                            ) : (
                              // ‚úÖ M√öLTIPLAS OPERA√á√ïES: Mostrar resumo (comportamento original)
                              <>
                                {operacoesDia.slice(0, 2).map((op: any, idx) => {
                                  // Calcular status da opera√ß√£o
                                  const confirmados = op.participantes_confirmados || 0;
                                  const pendentes = op.total_solicitacoes || op.pessoas_na_fila || 0; // ‚úÖ CORRE√á√ÉO: usar total_solicitacoes
                                  const limite = op.limite_participantes;

                                  const vagasDisponiveis = Math.max(0, limite - confirmados);
                                  const espacoNaFila = Math.max(0, limite - pendentes);

                                  let statusClass = '';
                                  let statusIcon = '';

                                  if (vagasDisponiveis > 0) {
                                    statusClass = styles.statusDisponivel;
                                    statusIcon = 'üü¢';
                                  } else if (espacoNaFila > 0) {
                                    statusClass = styles.statusFila;
                                    statusIcon = 'üü°';
                                  } else {
                                    statusClass = styles.statusLotado;
                                    statusIcon = 'üî¥';
                                  }

                                  return (
                                    <div
                                      key={idx}
                                      className={`${styles.operacaoItem} ${styles[op.modalidade.toLowerCase()]}`}
                                    >
                                      <div className={styles.operacaoHeader}>
                                        <span className={styles.operacaoName}>
                                          {op.modalidade} - {op.turno}
                                          {op.horario && (
                                            <span className={styles.operationTime}>
                                              {' '}{op.horario}
                                            </span>
                                          )}
                                        </span>
                                        <span className={`${styles.statusIndicator} ${statusClass}`}>
                                          {statusIcon}
                                        </span>
                                      </div>
                                      <div className={styles.operacaoStats}>
                                        <span className={styles.participantesCount}>
                                          üë• {confirmados}/{limite}
                                        </span>
                                        {pendentes > 0 && (
                                          <span className={styles.filaIndicator}>
                                            ‚è≥ {pendentes}
                                          </span>
                                        )}
                                      </div>
                                    </div>
                                  );
                                })}
                                {operacoesDia.length > 2 && (
                                  <span className={styles.moreOperacoes}>
                                    +{operacoesDia.length - 2} mais
                                  </span>
                                )}
                              </>
                            )}
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>


            </div>
          </div>
        </main>
      </div> {/* Fecha mainContent */}

      {/* Dialog de Opera√ß√µes */}
      {selectedDate && (
        <OperacaoDialog
          date={selectedDate}
          operacoes={operacoesPorDia[format(selectedDate, 'yyyy-MM-dd')] || []}
          onClose={() => setSelectedDate(null)}
          onOperacaoUpdate={refetch}
        />
      )}
    </div>
  );
}; 