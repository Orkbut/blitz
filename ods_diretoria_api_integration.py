#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Integra√ß√£o Avan√ßada entre API da Diretoria e planilha ODS
Este script conecta com a API real da aplica√ß√£o para obter dados din√¢micos
"""

import zipfile
import xml.etree.ElementTree as ET
import os
import shutil
from datetime import datetime, timedelta
import json
from typing import List, Dict, Any, Optional
import urllib.request
import urllib.parse
import urllib.error

class DiretoriaAPIIntegrator:
    def __init__(self, ods_file_path: str, api_base_url: str = "http://localhost:3000"):
        self.ods_file_path = ods_file_path
        self.api_base_url = api_base_url
        self.backup_path = f"{ods_file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Headers para autentica√ß√£o (ajuste conforme necess√°rio)
        self.headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'ODS-Diretoria-Integration/1.0'
        }
        
    def create_backup(self):
        """Criar backup do arquivo original"""
        shutil.copy2(self.ods_file_path, self.backup_path)
        print(f"‚úÖ Backup criado: {self.backup_path}")
        
    def make_api_request(self, endpoint: str, params: Optional[Dict] = None) -> Optional[Dict]:
        """Fazer requisi√ß√£o para a API"""
        try:
            url = f"{self.api_base_url}{endpoint}"
            if params:
                url += '?' + urllib.parse.urlencode(params)
                
            req = urllib.request.Request(url, headers=self.headers)
            
            with urllib.request.urlopen(req, timeout=30) as response:
                data = json.loads(response.read().decode('utf-8'))
                return data
                
        except urllib.error.URLError as e:
            print(f"‚ùå Erro na requisi√ß√£o para {endpoint}: {e}")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ùå Erro ao decodificar JSON: {e}")
            return None
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            return None
            
    def get_janelas_operacionais(self) -> List[Dict]:
        """Obter janelas operacionais ativas"""
        print("üîç Buscando janelas operacionais...")
        data = self.make_api_request('/api/supervisor/janelas-operacionais')
        
        if data and data.get('success'):
            janelas_ativas = [j for j in data['data'] if j.get('status') == 'ATIVA']
            print(f"‚úÖ {len(janelas_ativas)} janelas ativas encontradas")
            return janelas_ativas
        else:
            print("‚ùå Erro ao obter janelas operacionais")
            return []
            
    def get_operacoes_planejadas(self, janela_id: int) -> List[Dict]:
        """Obter opera√ß√µes planejadas de uma janela"""
        print(f"üìã Buscando opera√ß√µes planejadas da janela {janela_id}...")
        
        params = {
            'janela_id': janela_id,
            'tipo': 'PLANEJADA',
            '_t': int(datetime.now().timestamp())  # Cache bust
        }
        
        data = self.make_api_request('/api/unified/operacoes', params)
        
        if data and data.get('success'):
            operacoes = data['data']
            print(f"‚úÖ {len(operacoes)} opera√ß√µes encontradas")
            return operacoes
        else:
            print("‚ùå Erro ao obter opera√ß√µes planejadas")
            return []
            
    def get_participacoes_operacao(self, operacao_id: int) -> List[Dict]:
        """Obter participa√ß√µes de uma opera√ß√£o espec√≠fica"""
        params = {'_t': int(datetime.now().timestamp())}
        endpoint = f'/api/agendamento/operacoes/{operacao_id}/participacoes'
        
        data = self.make_api_request(endpoint, params)
        
        if data and data.get('success'):
            return data['data']
        else:
            return []
            
    def calcular_periodos_consecutivos(self, datas: List[str]) -> List[Dict]:
        """Calcular per√≠odos consecutivos baseado nas datas (l√≥gica da TabelaOperacoesDiretoria)"""
        if not datas:
            return []
            
        # Ordenar datas
        datas_ordenadas = sorted([datetime.fromisoformat(d.replace('Z', '+00:00')).date() for d in datas])
        
        periodos = []
        inicio_atual = datas_ordenadas[0]
        fim_atual = datas_ordenadas[0]
        
        for i in range(1, len(datas_ordenadas)):
            data_atual = datas_ordenadas[i]
            data_anterior = datas_ordenadas[i - 1]
            
            # Verificar se √© consecutiva (diferen√ßa de 1 dia)
            if (data_atual - data_anterior).days == 1:
                fim_atual = data_atual
            else:
                # Finalizar per√≠odo atual
                dias = (fim_atual - inicio_atual).days + 1
                periodos.append({
                    'inicio': inicio_atual,
                    'fim': fim_atual,
                    'dias': dias
                })
                
                # Iniciar novo per√≠odo
                inicio_atual = data_atual
                fim_atual = data_atual
                
        # Adicionar √∫ltimo per√≠odo
        dias = (fim_atual - inicio_atual).days + 1
        periodos.append({
            'inicio': inicio_atual,
            'fim': fim_atual,
            'dias': dias
        })
        
        return periodos
        
    def processar_dados_diretoria(self, janela_id: int) -> Dict[str, Any]:
        """Processar dados da diretoria seguindo a l√≥gica da TabelaOperacoesDiretoria"""
        print(f"üîÑ Processando dados da diretoria para janela {janela_id}...")
        
        # Obter opera√ß√µes planejadas
        operacoes = self.get_operacoes_planejadas(janela_id)
        if not operacoes:
            return {"periodos": []}
            
        # Obter todas as participa√ß√µes
        todas_participacoes = []
        for operacao in operacoes:
            participacoes = self.get_participacoes_operacao(operacao['id'])
            for p in participacoes:
                p['operacao_id'] = operacao['id']
                p['data_operacao'] = operacao.get('data_operacao') or operacao.get('dataOperacao')
            todas_participacoes.extend(participacoes)
            
        print(f"üë• {len(todas_participacoes)} participa√ß√µes encontradas")
        
        # Filtrar apenas participa√ß√µes confirmadas e ativas
        participacoes_confirmadas = [
            p for p in todas_participacoes 
            if p.get('ativa') and p.get('estado_visual') in ['CONFIRMADO', 'ADICIONADO_SUP']
        ]
        
        print(f"‚úÖ {len(participacoes_confirmadas)} participa√ß√µes confirmadas")
        
        # Agrupar por servidor
        servidores_por_id = {}
        for p in participacoes_confirmadas:
            servidor_id = p.get('membro_id') or p.get('servidor_id')
            if servidor_id not in servidores_por_id:
                servidores_por_id[servidor_id] = {
                    'nome': p.get('servidor_nome') or p.get('nome', 'Servidor'),
                    'matricula': p.get('matricula', ''),
                    'participacoes': []
                }
            servidores_por_id[servidor_id]['participacoes'].append(p)
            
        # Calcular PORTARIA MOR para cada servidor
        portarias_mor = []
        
        for servidor_id, dados in servidores_por_id.items():
            # Obter datas das opera√ß√µes
            datas_operacao = [p['data_operacao'] for p in dados['participacoes'] if p.get('data_operacao')]
            
            if not datas_operacao:
                continue
                
            # Calcular per√≠odos consecutivos
            periodos = self.calcular_periodos_consecutivos(datas_operacao)
            
            for periodo in periodos:
                # Calcular data de retorno (+1 dia ap√≥s a √∫ltima opera√ß√£o)
                data_retorno = periodo['fim'] + timedelta(days=1)
                
                # Formatar per√≠odo
                periodo_str = f"{periodo['inicio'].strftime('%d/%m')} a {data_retorno.strftime('%d/%m/%Y')}"
                
                portarias_mor.append({
                    'periodo': periodo_str,
                    'servidor': {
                        'nome': dados['nome'],
                        'matricula': dados['matricula'],
                        'nViagem': '',
                        'conc': '',
                        'rev': '',
                        'obs': ''
                    }
                })
                
        # Agrupar por per√≠odo
        periodos_agrupados = {}
        for portaria in portarias_mor:
            periodo = portaria['periodo']
            if periodo not in periodos_agrupados:
                periodos_agrupados[periodo] = []
            periodos_agrupados[periodo].append(portaria['servidor'])
            
        # Converter para formato final
        resultado = {
            "periodos": [
                {
                    "periodo": periodo,
                    "servidores": servidores
                }
                for periodo, servidores in sorted(periodos_agrupados.items())
            ]
        }
        
        print(f"üìä {len(resultado['periodos'])} per√≠odos processados")
        return resultado
        
    def extract_ods_content(self):
        """Extrair conte√∫do XML do arquivo ODS"""
        with zipfile.ZipFile(self.ods_file_path, 'r') as zip_file:
            content_xml = zip_file.read('content.xml')
            return ET.fromstring(content_xml)
            
    def format_diretoria_data_for_ods(self, diretoria_data: Dict[str, Any]) -> List[List[str]]:
        """Formatar dados da diretoria para inser√ß√£o na planilha ODS"""
        formatted_rows = []
        
        for periodo_data in diretoria_data["periodos"]:
            # Linha do per√≠odo (em amarelo)
            formatted_rows.append([f"Per√≠odo: {periodo_data['periodo']}", "", "", "", "", ""])
            
            # Linha do cabe√ßalho (Servidor, Matr√≠cula, etc.)
            formatted_rows.append(["Servidor", "Matr√≠cula", "N¬∫ Viagem", "Conc?", "Rev?", "Obs."])
            
            # Linhas dos servidores
            for servidor in periodo_data["servidores"]:
                formatted_rows.append([
                    servidor["nome"],
                    servidor["matricula"],
                    servidor["nViagem"],
                    servidor["conc"],
                    servidor["rev"],
                    servidor["obs"]
                ])
            
            # Linha em branco entre per√≠odos
            formatted_rows.append(["", "", "", "", "", ""])
            
        return formatted_rows
        
    def insert_data_into_ods(self, data_rows: List[List[str]], start_row: int = 15):
        """Inserir dados formatados na planilha ODS"""
        # Extrair conte√∫do
        root = self.extract_ods_content()
        
        # Encontrar a planilha (sheet)
        namespaces = {
            'office': 'urn:oasis:names:tc:opendocument:xmlns:office:1.0',
            'table': 'urn:oasis:names:tc:opendocument:xmlns:table:1.0',
            'text': 'urn:oasis:names:tc:opendocument:xmlns:text:1.0'
        }
        
        # Encontrar a primeira planilha
        sheet = root.find('.//table:table', namespaces)
        if sheet is None:
            raise Exception("Planilha n√£o encontrada no arquivo ODS")
            
        # Inserir dados linha por linha
        current_row = start_row
        
        for row_data in data_rows:
            # Criar nova linha
            new_row = ET.Element(f"{{{namespaces['table']}}}table-row")
            
            for cell_data in row_data:
                # Criar nova c√©lula
                new_cell = ET.Element(f"{{{namespaces['table']}}}table-cell")
                new_cell.set(f"{{{namespaces['table']}}}value-type", "string")
                
                # Criar par√°grafo com texto
                paragraph = ET.Element(f"{{{namespaces['text']}}}p")
                paragraph.text = str(cell_data)
                new_cell.append(paragraph)
                
                new_row.append(new_cell)
            
            # Adicionar linha √† planilha
            sheet.append(new_row)
            current_row += 1
            
        return root
        
    def save_modified_ods(self, modified_root):
        """Salvar planilha ODS modificada"""
        # Criar arquivo tempor√°rio
        temp_content = ET.tostring(modified_root, encoding='utf-8', xml_declaration=True)
        
        # Recriar arquivo ODS
        with zipfile.ZipFile(self.ods_file_path, 'r') as original_zip:
            with zipfile.ZipFile(f"{self.ods_file_path}.temp", 'w', zipfile.ZIP_DEFLATED) as new_zip:
                # Copiar todos os arquivos exceto content.xml
                for item in original_zip.infolist():
                    if item.filename != 'content.xml':
                        new_zip.writestr(item, original_zip.read(item.filename))
                
                # Adicionar content.xml modificado
                new_zip.writestr('content.xml', temp_content)
        
        # Substituir arquivo original
        os.replace(f"{self.ods_file_path}.temp", self.ods_file_path)
        
    def integrate_with_api(self, janela_id: Optional[int] = None, start_row: int = 20):
        """Processo completo de integra√ß√£o com a API real"""
        try:
            print("üîÑ Iniciando integra√ß√£o com API da diretoria...")
            
            # Criar backup
            self.create_backup()
            
            # Se n√£o foi especificada uma janela, usar a primeira ativa
            if janela_id is None:
                janelas = self.get_janelas_operacionais()
                if not janelas:
                    print("‚ùå Nenhuma janela operacional ativa encontrada")
                    return False
                janela_id = janelas[0]['id']
                print(f"üéØ Usando janela operacional: {janelas[0].get('titulo', janela_id)}")
            
            # Processar dados da diretoria
            diretoria_data = self.processar_dados_diretoria(janela_id)
            
            if not diretoria_data['periodos']:
                print("‚ö†Ô∏è Nenhum per√≠odo encontrado para inserir na planilha")
                return False
                
            # Formatar dados
            print("üìù Formatando dados para inser√ß√£o...")
            formatted_data = self.format_diretoria_data_for_ods(diretoria_data)
            
            # Inserir dados na planilha
            print("üìã Inserindo dados na planilha...")
            modified_root = self.insert_data_into_ods(formatted_data, start_row)
            
            # Salvar planilha modificada
            print("üíæ Salvando planilha modificada...")
            self.save_modified_ods(modified_root)
            
            print("‚úÖ Integra√ß√£o com API conclu√≠da com sucesso!")
            print(f"üìÅ Backup salvo em: {self.backup_path}")
            print(f"üìä {len(formatted_data)} linhas inseridas a partir da linha {start_row}")
            print(f"üéØ {len(diretoria_data['periodos'])} per√≠odos processados")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante a integra√ß√£o: {str(e)}")
            return False

def main():
    """Fun√ß√£o principal"""
    ods_file = r"c:\Users\BLITZ\Desktop\FOCO\blitz\Pedido Di√°ria Padrao (3).ods"
    
    if not os.path.exists(ods_file):
        print(f"‚ùå Arquivo n√£o encontrado: {ods_file}")
        return
        
    # Configurar integrador
    integrator = DiretoriaAPIIntegrator(ods_file, "http://localhost:3000")
    
    print("üöÄ Integra√ß√£o Avan√ßada - Diretoria + ODS")
    print("===========================================")
    print("Este script conecta com a API real da aplica√ß√£o")
    print("para obter dados din√¢micos da diretoria.")
    print()
    
    # Tentar integra√ß√£o com API
    print("üîó Tentando conectar com a API...")
    success = integrator.integrate_with_api()
    
    if not success:
        print("\n‚ö†Ô∏è Falha na conex√£o com API. Usando dados mock...")
        # Fallback para dados mock
        from ods_diretoria_integration import DiretoriaODSIntegrator
        mock_integrator = DiretoriaODSIntegrator(ods_file)
        success = mock_integrator.integrate_diretoria_data(start_row=25)
        
    if success:
        print("\nüéâ Integra√ß√£o conclu√≠da! Verifique a planilha ODS.")
    else:
        print("\n‚ùå Falha na integra√ß√£o")

if __name__ == "__main__":
    main()